/**
 * This file is autogenerated by Scaffold-ETH.
 * You should not edit it manually or your changes might be overwritten.
 */
import { GenericContractsDeclaration } from "~~/utils/scaffold-eth/contract";

const deployedContracts = {
  31337: {
    ModeratorRegistry: {
      address: "0xefee9654334ee89a25021903b01ad840c7494de2",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "MINIMUM_STAKE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "activeModerators",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getActiveModeratorCount",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getActiveModerators",
          inputs: [
            {
              name: "_offset",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "result",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getModeratorData",
          inputs: [
            {
              name: "_moderator",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "reputation",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "stake",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "active",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "increaseStake",
          inputs: [],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "moderationContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "moderators",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "reputation",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "stake",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "active",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "exists",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "registerAsModerator",
          inputs: [],
          outputs: [],
          stateMutability: "payable",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setActiveStatus",
          inputs: [
            {
              name: "_active",
              type: "bool",
              internalType: "bool",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setModerationContract",
          inputs: [
            {
              name: "_moderationContract",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateReputation",
          inputs: [
            {
              name: "_moderator",
              type: "address",
              internalType: "address",
            },
            {
              name: "_newReputation",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "withdrawStake",
          inputs: [
            {
              name: "_amount",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "event",
          name: "ModeratorRegistered",
          inputs: [
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "initialStake",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModeratorReputationChanged",
          inputs: [
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "previousReputation",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
            {
              name: "newReputation",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModeratorStakeIncreased",
          inputs: [
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "additionalStake",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModeratorStakeWithdrawn",
          inputs: [
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "amount",
              type: "uint256",
              indexed: false,
              internalType: "uint256",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModeratorStatusChanged",
          inputs: [
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "active",
              type: "bool",
              indexed: false,
              internalType: "bool",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1741450980.json",
      deploymentScript: "Deploy.s.sol",
    },
    ContentRegistry: {
      address: "0x8c0028b38c492a2f991dd805093c6712344d012f",
      abi: [
        {
          type: "constructor",
          inputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "contentIds",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "contents",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "creator",
              type: "address",
              internalType: "address",
            },
            {
              name: "contentHash",
              type: "string",
              internalType: "string",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "status",
              type: "uint8",
              internalType: "enum ContentRegistry.ContentStatus",
            },
            {
              name: "exists",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "createContent",
          inputs: [
            {
              name: "_contentHash",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [
            {
              name: "contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "getPaginatedContent",
          inputs: [
            {
              name: "_offset",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_limit",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_status",
              type: "int8",
              internalType: "int8",
            },
          ],
          outputs: [
            {
              name: "contents_",
              type: "tuple[]",
              internalType: "struct ContentRegistry.Content[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "contentHash",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "timestamp",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "status",
                  type: "uint8",
                  internalType: "enum ContentRegistry.ContentStatus",
                },
                {
                  name: "exists",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "total",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getUserContent",
          inputs: [
            {
              name: "_user",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "tuple[]",
              internalType: "struct ContentRegistry.Content[]",
              components: [
                {
                  name: "creator",
                  type: "address",
                  internalType: "address",
                },
                {
                  name: "contentHash",
                  type: "string",
                  internalType: "string",
                },
                {
                  name: "timestamp",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "status",
                  type: "uint8",
                  internalType: "enum ContentRegistry.ContentStatus",
                },
                {
                  name: "exists",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "moderationContract",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "setModerationContract",
          inputs: [
            {
              name: "_moderationContract",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateContentHash",
          inputs: [
            {
              name: "_contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "_newContentHash",
              type: "string",
              internalType: "string",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "updateContentStatus",
          inputs: [
            {
              name: "_contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "_newStatus",
              type: "uint8",
              internalType: "enum ContentRegistry.ContentStatus",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "userContents",
          inputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "ContentCreated",
          inputs: [
            {
              name: "contentId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "creator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "contentHash",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ContentStatusChanged",
          inputs: [
            {
              name: "contentId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "previousStatus",
              type: "uint8",
              indexed: false,
              internalType: "enum ContentRegistry.ContentStatus",
            },
            {
              name: "newStatus",
              type: "uint8",
              indexed: false,
              internalType: "enum ContentRegistry.ContentStatus",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ContentUpdated",
          inputs: [
            {
              name: "contentId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "newContentHash",
              type: "string",
              indexed: false,
              internalType: "string",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1741450980.json",
      deploymentScript: "Deploy.s.sol",
    },
    ModerationSystem: {
      address: "0x234b6cca64a9806f6ac27d13dfd3710f25acaf0b",
      abi: [
        {
          type: "constructor",
          inputs: [
            {
              name: "_contentRegistry",
              type: "address",
              internalType: "contract ContentRegistry",
            },
            {
              name: "_moderatorRegistry",
              type: "address",
              internalType: "contract ModeratorRegistry",
            },
          ],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "BFT_TOLERANCE",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "castVote",
          inputs: [
            {
              name: "_requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "_vote",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "contentRegistry",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract ContentRegistry",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getModerationInfo",
          inputs: [
            {
              name: "_requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "requiredModerators",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "moderationsCount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "resolved",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "removeVotes",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "keepVotes",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getModeratorRequests",
          inputs: [
            {
              name: "_moderator",
              type: "address",
              internalType: "address",
            },
            {
              name: "_offset",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "_limit",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "requests_",
              type: "tuple[]",
              internalType: "struct ModerationSystem.ModeratorRequestView[]",
              components: [
                {
                  name: "requestId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "contentId",
                  type: "bytes32",
                  internalType: "bytes32",
                },
                {
                  name: "timestamp",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "requiredModerators",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "moderationsCount",
                  type: "uint256",
                  internalType: "uint256",
                },
                {
                  name: "resolved",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "exists",
                  type: "bool",
                  internalType: "bool",
                },
                {
                  name: "hasVoted",
                  type: "bool",
                  internalType: "bool",
                },
              ],
            },
            {
              name: "total",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "getSelectedModerators",
          inputs: [
            {
              name: "_requestId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address[]",
              internalType: "address[]",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "hasVoted",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "moderationRequests",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [
            {
              name: "contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "timestamp",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "requiredModerators",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "moderationsCount",
              type: "uint256",
              internalType: "uint256",
            },
            {
              name: "resolved",
              type: "bool",
              internalType: "bool",
            },
            {
              name: "exists",
              type: "bool",
              internalType: "bool",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "moderatorRegistry",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "contract ModeratorRegistry",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "owner",
          inputs: [],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "renounceOwnership",
          inputs: [],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "requestIds",
          inputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "requestModeration",
          inputs: [
            {
              name: "_contentId",
              type: "bytes32",
              internalType: "bytes32",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "selectedModerators",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [
            {
              name: "",
              type: "address",
              internalType: "address",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "function",
          name: "setBFTTolerance",
          inputs: [
            {
              name: "_tolerance",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "transferOwnership",
          inputs: [
            {
              name: "newOwner",
              type: "address",
              internalType: "address",
            },
          ],
          outputs: [],
          stateMutability: "nonpayable",
        },
        {
          type: "function",
          name: "votes",
          inputs: [
            {
              name: "",
              type: "bytes32",
              internalType: "bytes32",
            },
            {
              name: "",
              type: "uint8",
              internalType: "uint8",
            },
          ],
          outputs: [
            {
              name: "",
              type: "uint256",
              internalType: "uint256",
            },
          ],
          stateMutability: "view",
        },
        {
          type: "event",
          name: "ModerationRequested",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "contentId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModerationResolved",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "decision",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModerationVoteCast",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "vote",
              type: "uint8",
              indexed: false,
              internalType: "uint8",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "ModeratorSelected",
          inputs: [
            {
              name: "requestId",
              type: "bytes32",
              indexed: true,
              internalType: "bytes32",
            },
            {
              name: "moderator",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "event",
          name: "OwnershipTransferred",
          inputs: [
            {
              name: "previousOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
            {
              name: "newOwner",
              type: "address",
              indexed: true,
              internalType: "address",
            },
          ],
          anonymous: false,
        },
        {
          type: "error",
          name: "OwnableInvalidOwner",
          inputs: [
            {
              name: "owner",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "OwnableUnauthorizedAccount",
          inputs: [
            {
              name: "account",
              type: "address",
              internalType: "address",
            },
          ],
        },
        {
          type: "error",
          name: "ReentrancyGuardReentrantCall",
          inputs: [],
        },
      ],
      inheritedFunctions: {},
      deploymentFile: "run-1741450980.json",
      deploymentScript: "Deploy.s.sol",
    },
  },
} as const;

export default deployedContracts satisfies GenericContractsDeclaration;
